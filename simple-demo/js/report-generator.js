/**
 * Report Generator Module for Mood Notetaker
 * Generates interview evaluation reports using OpenAI API
 */

// Use config from window object instead of import
// import config from './config.js';

/**
 * Evaluate an interview using OpenAI's GPT
 * @param {string} transcript - The full interview transcript
 * @param {string} role - The role being interviewed for
 * @param {string} company - The company name
 * @param {string} focus - Focus areas for the interview
 * @returns {Promise<string>} - The formatted report in markdown
 */
async function evaluateWithGPT(transcript, role, company, focus) {
  console.log('Evaluating interview using GPT...');
  console.log('Transcript length:', transcript.length, 'characters');
  console.log('First 100 chars:', transcript.substring(0, 100));
  
  if (!window.config || !window.config.openaiApiKey) {
    console.warn('No OpenAI API key configured - using mock evaluation');
    return generateMockReport(role, company, focus);
  }
  
  // Create a system prompt for the evaluation
  const systemPrompt = `
As an expert interview coach and hiring manager, evaluate this ${role} interview at ${company}.
The interview focused on: ${focus}.

Provide a comprehensive, honest assessment with:

1. Overall impression (scoring candidate on a scale of 1-10)
2. Content analysis (quality of answers, technical accuracy, relevance)
3. Communication style (clarity, confidence, engagement)
4. Key strengths (specific examples from transcript)
5. Areas for improvement (specific examples with tactical advice)
6. Next steps (3-5 actionable recommendations)

Format your response in Markdown with clear headings and bullet points.
Be specific, constructive, and actionable in your feedback.`;

  try {
    // Make the API request
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${window.config.openaiApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: transcript }
        ],
        max_tokens: 2000
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    
    if (!data.choices || !data.choices.length) {
      throw new Error('No evaluation received from OpenAI');
    }
    
    // Format and return the report
    return formatEvaluationReport(data.choices[0].message.content, role, company);
  } catch (error) {
    console.error('Error evaluating interview:', error);
    return generateErrorReport(error, role, company);
  }
}

/**
 * Format the evaluation report with additional metadata
 * @param {string} evaluationText - The raw evaluation from GPT
 * @param {string} role - The role being interviewed for
 * @param {string} company - The company name
 * @returns {string} - The formatted report
 */
function formatEvaluationReport(evaluationText, role, company) {
  const currentDate = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  
  return `# Interview Evaluation Report
## ${role} Position at ${company}
**Generated on:** ${currentDate}

${evaluationText}

---
*Generated by Mood Notetaker - AI-powered interview evaluation system*`;
}

/**
 * Generate a simple mock report when OpenAI API is not available
 * @param {string} role - The role being interviewed for
 * @param {string} company - The company name
 * @param {string} focus - Focus areas for the interview
 * @returns {string} - A mock report
 */
function generateMockReport(role, company, focus) {
  return `# Interview Evaluation Report
## ${role} Position at ${company}
**Generated on:** ${new Date().toLocaleDateString()}

## Overall Impression
Score: 7/10 (Mock evaluation)

The candidate demonstrated a solid understanding of ${focus} with room for improvement in some technical areas.

## Content Analysis
* Provided relevant examples for most questions
* Demonstrated technical knowledge appropriate for the position
* Could improve depth in some technical explanations

## Communication Style
* Clear and articulate communication
* Maintained good engagement throughout
* Could improve confidence when discussing challenging topics

## Key Strengths
* Problem-solving approach was methodical and effective
* Good understanding of industry best practices
* Demonstrated strong teamwork examples

## Areas for Improvement
* Technical depth in certain ${focus.split(',')[0]} topics
* Providing more quantifiable results in work examples
* Structuring responses more concisely

## Next Steps
1. Review core concepts in ${focus}
2. Practice structured interview responses using the STAR method
3. Prepare more specific examples with measurable outcomes
4. Follow up with a thank you note highlighting key discussion points

---
*Generated by Mood Notetaker - AI-powered interview evaluation system (MOCK MODE)*`;
}

/**
 * Generate an error report when evaluation fails
 * @param {Error} error - The error that occurred
 * @param {string} role - The role being interviewed for
 * @param {string} company - The company name
 * @returns {string} - An error report
 */
function generateErrorReport(error, role, company) {
  return `# Interview Evaluation Report - Error
## ${role} Position at ${company}
**Generated on:** ${new Date().toLocaleDateString()}

## Error Generating Report
Unfortunately, we encountered an error while evaluating your interview:

\`\`\`
${error.message}
\`\`\`

### Possible Solutions:
1. Check your OpenAI API key configuration
2. Ensure you have sufficient credits in your OpenAI account
3. Try again later as the service might be experiencing temporary issues
4. If the problem persists, you can manually review the transcript

---
*Generated by Mood Notetaker - AI-powered interview evaluation system*`;
}

// Make functions available globally
window.evaluateWithGPT = evaluateWithGPT; 